#!/usr/bin/env ruby
# frozen_string_literal: true

Signal.trap('INT') { exit(130) }
Signal.trap('SIGINT') { exit(130) }
Signal.trap('TERM') { exit(143) }

require 'bundler/setup'

require 'sodor'
require 'sodor/cli'
require 'sodor/app'
require 'optparse'

require 'awesome_print'
require 'pry'
require 'byebug'

require 'set'

OptionParser.new do |opts|
  opts.banner = 'Usage: bundle exec sodor [OPTION]... [FILE]'

  opts.on('-V', '--version', 'Print version info') do
    $stdout.puts(Sodor::VERSION)
    exit(0)
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    warn(opts)
    exit(0)
  end
end.parse!

raise 'File not processable' unless Sodor::CLI.processable?

Pair = Struct.new(:inbound, :outbound, :distance)

def rowify(origin, destination, distance)
  [
    origin,
    destination,
    Integer(distance)
  ].freeze
end

ROOT = 'A'

@table = Set.new

@nodes = {}

def xxx(root)
  @nodes[root].map { |_child| [root, @nodes[root]] }
end

begin
  # app = Sodor::CLI.run(Sodor::App, ARGF)

  ARGF.each_line do |line|
    # pairs.add(Pair.new(*line.strip.split('')))
    row = rowify(*line.strip.split(''))
    @table.add(row)

    @nodes[row.first] ||= []
    @nodes[row.first].push(row[1])
  end

  # ap @table

  tree = @nodes[ROOT].map do |_d1|
    xxx(ROOT)
    # [
    #   ROOT,
    #   @nodes[d1].map do |d2|
    #     [
    #       d1,
    #       nodes[d2].map { |d3| [d2,d3] }
    #     ]
    #   end
    # ]
  end

  puts tree.inspect

  # Sodor::Reports::AccountsSummary.new(app.bank).run
rescue Errno::EPIPE
  exit(74)
end
